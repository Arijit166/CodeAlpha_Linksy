<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>linksy â€¢ Home</title>
  <style>
    :root {
      --bg: #0a0a0a;
      --surface: #1a1a1a;
      --surface-light: #2a2a2a;
      --surface-hover: #2d2d2d;
      --text: #ffffff;
      --text-secondary: #b3b3b3;
      --text-muted: #666666;
      --border: #333333;
      --border-light: #404040;
      --primary: #1d9bf0;
      --primary-hover: #1a8cd8;
      --primary-glow: rgba(29, 155, 240, 0.3);
      --heart: #f91880;
      --heart-hover: #e11d74;
      --success: #00ba7c;
      --glass-bg: rgba(26, 26, 26, 0.8);
      --accent-gradient: linear-gradient(135deg, var(--primary) 0%, #8b5cf6 100%);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Inter", sans-serif;
      background: var(--bg);
      color: var(--text);
      line-height: 1.6;
    }

    /* Custom scrollbar */
    ::-webkit-scrollbar { width: 6px; height: 6px; }
    ::-webkit-scrollbar-track { background: var(--surface); border-radius: 3px; }
    ::-webkit-scrollbar-thumb { 
      background: linear-gradient(45deg, var(--primary), var(--heart));
      border-radius: 3px;
      transition: all 0.3s ease;
    }
    ::-webkit-scrollbar-thumb:hover { 
      background: linear-gradient(45deg, var(--primary-hover), var(--heart-hover));
    }

    /* <CHANGE> Added welcome banner styles matching the screenshot */
    .welcome-banner {
      background: var(--surface);
      border-bottom: 1px solid var(--border);
      padding: 24px 0;
      margin-top: 70px;
      position: sticky;
      top: 70px;
      z-index: 999;
    }

    .welcome-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 24px;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .welcome-content {
      display: flex;
      flex-direction: column;
      gap: 4px;
    }

    .welcome-title {
      font-size: 24px;
      font-weight: 800;
      color: var(--text);
      letter-spacing: -0.3px;
      background: var(--accent-gradient);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .welcome-subtitle {
      font-size: 15px;
      color: var(--text-secondary);
      margin: 0;
    }

    .welcome-icon {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 40px;
      height: 40px;
      background: var(--primary);
      border-radius: 50%;
      color: white;
      opacity: 0.8;
    }

    /* <CHANGE> Updated main layout to match screenshot with proper flexbox */
    .main-layout {
      display: flex;
      max-width: 1200px;
      margin: 0 auto;
      padding: 32px 24px 100px;
      gap: 32px;
      align-items: flex-start;
    }

    .main-feed {
      flex: 1;
      min-width: 0;
      margin-right: 352px; /* Width of sidebar + gap */
    }

    .feed { 
      display: flex; 
      flex-direction: column; 
      gap: 28px; 
    }

    /* <CHANGE> Updated sidebar to be fixed and match screenshot design */
    .sidebar-container {
      width: 320px;
      position: fixed;
      top: 200px;
      right: calc((100vw - 1200px) / 2);
      height: calc(100vh - 220px); /* Must have a defined height */
      overflow: hidden;
    }

    .suggestions {
      background: var(--surface);
      border: 1px solid var(--border);
      border-radius: 16px;
      overflow: hidden;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
      display: flex;
      flex-direction: column;
      height: 100%; /* Take full height of parent */
    }

    .suggestions-list { 
      padding: 12px; 
      display: flex; 
      flex-direction: column; 
      gap: 12px; /* Increased gap for comfortable spacing */
      overflow-y: auto; /* This will scroll when content exceeds height */
      flex: 1;
      scrollbar-width: thin;
      scrollbar-color: var(--primary) var(--surface);
    }

    .suggestion-item {
      display: flex; 
      align-items: center; 
      justify-content: space-between;
      gap: 12px; 
      padding: 16px; /* Increased padding for comfort */
      border-radius: 12px;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
      flex-shrink: 0; /* Prevent shrinking */
    }

    .suggestions-header {
      display: flex; 
      align-items: center; 
      justify-content: space-between;
      padding: 20px 20px 16px; 
      border-bottom: 1px solid var(--border);
      background: var(--glass-bg);
      flex-shrink: 0;
      position: sticky;
      top: 0;
      z-index: 1;
    }
    
    .suggestions-title { 
      font-size: 18px; 
      font-weight: 800; 
      letter-spacing: -0.3px;
      background: var(--accent-gradient);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .suggestions-list::-webkit-scrollbar {
      width: 4px;
    }

    .suggestions-list::-webkit-scrollbar-track {
      background: var(--surface-light);
      border-radius: 2px;
    }

    .suggestions-list::-webkit-scrollbar-thumb {
      background: var(--primary);
      border-radius: 2px;
      transition: background 0.3s ease;
    }

    .suggestions-list::-webkit-scrollbar-thumb:hover {
      background: var(--primary-hover);
    }

    .suggestion-item::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.05), transparent);
      transition: left 0.5s ease;
    }

    .suggestion-item:hover::before {
      left: 100%;
    }

    .suggestion-item:hover { 
      background: var(--surface-hover);
      transform: translateX(4px);
    }

    .sug-user { 
      display: flex; 
      align-items: center; 
      gap: 12px; 
      min-width: 0; 
    }

    .sug-avatar { 
      width: 40px; 
      height: 40px; 
      border-radius: 50%; 
      object-fit: cover; 
      flex-shrink: 0;
      border: 2px solid var(--border);
      transition: all 0.3s ease;
    }

    .suggestion-item:hover .sug-avatar {
      border-color: var(--primary);
      transform: scale(1.05);
    }

    .sug-meta { 
      display: flex; 
      flex-direction: column; 
      min-width: 0; 
    }

    .sug-name { 
      font-size: 14px; 
      font-weight: 700; 
      color: var(--text); 
      overflow: hidden; 
      text-overflow: ellipsis; 
      white-space: nowrap;
      letter-spacing: -0.2px;
    }

    .sug-note { 
      font-size: 12px; 
      color: var(--text-muted); 
      overflow: hidden; 
      text-overflow: ellipsis; 
      white-space: nowrap;
      margin-top: 1px;
    }

    .follow-btn {
      padding: 8px 16px; 
      border-radius: 20px; 
      font-size: 13px; 
      font-weight: 700; 
      cursor: pointer; 
      border: 1px solid var(--border);
      background: var(--primary); 
      color: #fff; 
      transition: all .3s ease;
      position: relative;
      overflow: hidden;
    }

    .follow-btn::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 0;
      height: 0;
      background: rgba(255,255,255,0.2);
      border-radius: 50%;
      transition: all 0.3s ease;
      transform: translate(-50%, -50%);
    }

    .follow-btn:hover::before {
      width: 100%;
      height: 100%;
    }

    .follow-btn:hover { 
      background: var(--primary-hover);
      transform: translateY(-1px);
      box-shadow: 0 4px 12px var(--primary-glow);
    }

    .follow-btn.following {
      background: transparent; 
      color: var(--text);           /* White text */
      border: 1px solid var(--border); /* Normal border color */
      border-radius: 8px;           /* Optional: smooth corners */
      outline: none;                /* Remove default focus outline */
      transition: all 0.2s ease;   /* Smooth hover transition */
    }

    .follow-btn.following:hover {
      background: var(--surface-hover); /* Dark hover background */
      transform: translateY(-1px);
      outline: none; /* Ensure no outline on hover/focus */
      box-shadow: none; /* Remove any accidental shadow */
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Inter", sans-serif;
      background: var(--bg);
      color: var(--text);
      line-height: 1.6;
    }

    /* Custom scrollbar */
    ::-webkit-scrollbar { width: 6px; height: 6px; }
    ::-webkit-scrollbar-track { background: var(--surface); border-radius: 3px; }
    ::-webkit-scrollbar-thumb { 
      background: linear-gradient(45deg, var(--primary), var(--heart));
      border-radius: 3px;
      transition: all 0.3s ease;
    }
    ::-webkit-scrollbar-thumb:hover { 
      background: linear-gradient(45deg, var(--primary-hover), var(--heart-hover));
    }

    .feed { 
      display: flex; 
      flex-direction: column; 
      gap: 28px; 
    }

    .post-card {
      background: var(--surface);
      border: 1px solid var(--border);
      border-radius: 16px;
      overflow: hidden;
      transition: all 0.3s ease;
      position: relative;
    }

    .post-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 2px;
      background: var(--accent-gradient);
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .post-card:hover {
      border-color: var(--border-light);
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
    }

    .post-card:hover::before {
      opacity: 1;
    }

    .post-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 18px 20px;
      width: 100%;
    }

    .post-user { display: flex; align-items: center; gap: 14px; }
    .post-avatar { 
      width: 42px; 
      height: 42px; 
      border-radius: 50%; 
      object-fit: cover;
      border: 2px solid var(--border);
      transition: border-color 0.3s ease;
    }

    .post-card:hover .post-avatar {
      border-color: var(--primary);
    }

    .post-user-info { display: flex; flex-direction: column; }
    .post-username { 
      font-size: 15px; 
      font-weight: 700; 
      color: var(--text);
      letter-spacing: -0.2px;
    }
    .post-time { 
      font-size: 13px; 
      color: var(--text-muted);
      margin-top: 1px;
    }

    .post-menu {
      background: none; 
      border: none; 
      color: var(--text-secondary); 
      cursor: pointer; 
      padding: 10px; 
      border-radius: 10px;
      transition: all 0.2s ease;
    }
    .post-menu:hover { 
      background: var(--surface-hover);
      color: var(--text);
      transform: scale(1.1);
    }

    .post-image {
      height: 500px;
      width: 100%;
      object-fit: cover;
      cursor: pointer;
      user-select: none;
      background: #0a0a0a;
      transition: transform 0.3s ease;
    }

    .post-image:hover {
      transform: scale(1.02);
    }

    .post-actions {
      display: flex;
      gap: 20px;
      padding: 12px 20px;
      border-bottom: 1px solid var(--border);
      margin-bottom: 12px;
    }

    .post-action {
      display: flex;
      align-items: center;
      gap: 8px;
      cursor: pointer;
      color: var(--text-muted);
      transition: color 0.2s;
      padding: 8px;
      border-radius: 8px;
      transition: all 0.2s;
      background: none;
      border: none;
    }

    .post-action:hover {
      background: var(--surface-hover);
      color: var(--text);
    }

    .post-action svg {
      width: 18px;
      height: 18px;
      fill: currentColor;
    }

    .like-icon.liked {
      color: var(--heart);
      color: var(--text-secondary);
    }

    .empty-feed {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 60px 20px;
      text-align: center;
      color: var(--text-secondary);
    }

    .empty-feed svg {
      width: 80px;
      height: 80px;
      margin-bottom: 16px;
      fill: var(--accent);
      opacity: 0.8;
    }

    .empty-feed h2 {
      font-size: 1.25rem;
      font-weight: 600;
      margin-bottom: 8px;
      color: var(--text-primary);
    }

    .empty-feed p {
      font-size: 0.95rem;
      max-width: 320px;
      line-height: 1.5;
    }
    .caught-up {
      text-align: center;
      padding: 40px 20px;
      color: var(--text-muted);
      border-top: 1px solid var(--border);
      margin-top: 20px;
    }

    .caught-up-icon {
      font-size: 48px;
      margin-bottom: 16px;
      opacity: 0.6;
    }

    .caught-up h3 {
      font-size: 20px;
      color: var(--text-secondary);
      margin-bottom: 8px;
    }

    .caught-up p {
      font-size: 14px;
    }

    /* <CHANGE> Added responsive design for mobile */
    @media (max-width: 768px) {
      .main-layout {
        flex-direction: column;
        padding: 16px;
        gap: 20px;
      }
      
      .sidebar-container {
        width: 100%;
        position: static;
        max-height: none;
      }
      
      .welcome-banner {
        margin-top: 60px;
        top: 60px;
      }
    }
    .like-icon.liked {
      color: #ff4458;
      fill: #ff4458;
    }

    .like-action:hover .like-icon:not(.liked) {
      color: #ff4458;
    }

    .comment-action:hover svg {
      color: #1da1f2;
    }

    .like-action {
      position: relative;
    }

    .like-icon {
      cursor: pointer;
    }

    .like-count {
      cursor: pointer;
      user-select: none;
    }

    .comments-section {
      border-top: 1px solid #333333;
      padding-top: 12px;
      margin-top: 12px;
    }

    .comment-input-container {
      display: flex;
      align-items: center;
      gap: 12px;
      margin-bottom: 16px;
      padding: 12px;
      background: #1a1a1a;
      border-radius: 12px;
    }

    .comment-avatar {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      object-fit: cover;
    }

    .comment-input {
      flex: 1;
      background: transparent;
      border: none;
      color: #ffffff;
      font-size: 14px;
      outline: none;
    }

    .comment-input::placeholder {
      color: #666666;
    }

    .comment-submit {
      background: #1d9bf0;
      border: none;
      color: #ffffff;
      padding: 6px 16px;
      border-radius: 20px;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: background 0.2s;
    }

    .comment-submit:hover {
      background: #1a8cd8;
    }

    .comment-submit:disabled {
      background: #666666;
      cursor: not-allowed;
    }

    .comments-list {
      max-height: 300px;
      overflow-y: auto;
      scrollbar-width: thin;
      scrollbar-color: #1d9bf0 #2a2a2a;
    }

    .comments-list::-webkit-scrollbar {
      width: 4px;
    }

    .comments-list::-webkit-scrollbar-track {
      background: #2a2a2a;
      border-radius: 2px;
    }

    .comments-list::-webkit-scrollbar-thumb {
      background: #1d9bf0;
      border-radius: 2px;
    }

    .comment-item {
      display: flex;
      gap: 12px;
      margin-bottom: 12px;
      padding: 8px;
      border-radius: 8px;
      transition: background 0.2s;
    }

    .comment-item:hover {
      background: #1a1a1a;
    }

    .comment-item-avatar {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      object-fit: cover;
    }

    .comment-item-content {
      flex: 1;
    }

    .comment-item-header {
      display: flex;
      align-items: center;
      gap: 8px;
      margin-bottom: 4px;
    }

    .comment-item-name {
      font-weight: 600;
      font-size: 14px;
      color: #ffffff;
    }

    .comment-item-time {
      color: #666666;
      font-size: 12px;
    }

    .comment-item-text {
      font-size: 14px;
      line-height: 1.4;
      color: #ffffff;
    }

    .comment-item-actions {
      display: flex;
      align-items: center;
      gap: 12px;
      margin-top: 8px;
    }

    .reply-btn {
      background: none;
      border: none;
      color: #666666;
      font-size: 12px;
      font-weight: 600;
      cursor: pointer;
      transition: color 0.2s;
    }

    .reply-btn:hover {
      color: #1d9bf0;
    }

    .replies-container {
      margin-top: 12px;
      margin-left: 44px;
      border-left: 2px solid #333333;
      padding-left: 12px;
    }

    .reply-item {
      display: flex;
      gap: 8px;
      margin-bottom: 8px;
      padding: 6px;
      border-radius: 6px;
      transition: background 0.2s;
    }

    .reply-item:hover {
      background: #1a1a1a;
    }

    .reply-item-avatar {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      object-fit: cover;
    }

    .reply-item-content {
      flex: 1;
    }

    .reply-item-header {
      display: flex;
      align-items: center;
      gap: 6px;
      margin-bottom: 2px;
    }

    .reply-item-name {
      font-weight: 600;
      font-size: 12px;
      color: #ffffff;
    }

    .reply-item-time {
      color: #666666;
      font-size: 11px;
    }

    .reply-item-text {
      font-size: 13px;
      line-height: 1.4;
      color: #ffffff;
    }

    .reply-input-container {
      display: none;
      margin-top: 8px;
      margin-left: 44px;
      padding: 8px;
      background: #1a1a1a;
      border-radius: 8px;
    }

    .reply-input-container.show {
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .reply-input-avatar {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      object-fit: cover;
    }

    .reply-input {
      flex: 1;
      background: transparent;
      border: none;
      color: #ffffff;
      font-size: 12px;
      outline: none;
    }

    .reply-input::placeholder {
      color: #666666;
    }

    .reply-submit {
      background: #1d9bf0;
      border: none;
      color: #ffffff;
      padding: 4px 12px;
      border-radius: 16px;
      font-size: 12px;
      font-weight: 600;
      cursor: pointer;
      transition: background 0.2s;
    }

    .reply-submit:hover {
      background: #1a8cd8;
    }

    .reply-submit:disabled {
      background: #666666;
      cursor: not-allowed;
    }

    .show-replies-btn {
      background: none;
      border: none;
      color: #666666;
      font-size: 12px;
      cursor: pointer;
      margin-top: 4px;
      transition: color 0.2s;
    }

    .show-replies-btn:hover {
      color: #ffffff;
    }
    .modal {
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
  }

  .modal-content {
      background: #1a1a1a;
      border: 1px solid #333333;
      border-radius: 16px;
      width: 90%;
      max-width: 400px;
      max-height: 600px;
      overflow: hidden;
  }

  .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 20px;
      border-bottom: 1px solid #333333;
  }

  .modal-header h3 {
      margin: 0;
      font-size: 20px;
      font-weight: 700;
  }

  .close-modal {
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
      color: #666666;
      transition: color 0.2s;
  }

  .close-modal:hover {
      color: #ffffff;
  }

  .modal-body {
      padding: 0;
      max-height: 500px;
      overflow-y: auto;
  }

  .user-item {
      display: flex;
      align-items: center;
      padding: 16px 20px;
      border-bottom: 1px solid #333333;
      transition: background-color 0.2s;
      cursor: pointer;
  }

  .user-item:hover {
      background-color: #2a2a2a;
  }

  .user-item:last-child {
      border-bottom: none;
  }

  .user-item-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      object-fit: cover;
      margin-right: 12px;
  }

  .user-item-info {
      flex: 1;
  }

  .user-item-name {
      font-weight: 700;
      font-size: 15px;
      margin-bottom: 2px;
  }

  .user-item-username {
      color: #666666;
      font-size: 14px;
  }

  .modal-loading {
      text-align: center;
      padding: 40px;
      color: #666666;
  }

  .modal-empty {
      text-align: center;
      padding: 40px;
      color: #666666;
  }
  .welcome-text {
    text-align: center;
    color: var(--text-secondary); 
    max-width: 350px;
    margin: 0 auto;
    font-family: 'Segoe UI', Roboto, sans-serif;
    line-height: 1.5;
    gap: 6px;
  }

  .welcome-text h3 {
    font-size: 1.6rem;
    font-weight: 700;
    color: var(--text); /* primary text color */
    margin-bottom: 8px;
  }

  .welcome-text p {
    font-size: 1rem;
    color: var(--text-secondary); /* subtle secondary text */
    margin: 2px 0;
  }
  .post-follow-btn {
    padding: 6px 16px;
    border-radius: 20px;
    font-size: 13px;
    font-weight: 700;
    cursor: pointer;
    border: 1px solid var(--border);
    background: var(--primary);
    color: #fff;
    transition: all .3s ease;
    margin-left: auto; /* This pushes it to the right */
    flex-shrink: 0; /* Prevents shrinking */
  }

  .post-follow-btn:hover {
    background: var(--primary-hover);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px var(--primary-glow);
  }

  .post-follow-btn.following {
    background: transparent;
    color: var(--text);
    border: 1px solid var(--border);
  }

  .post-follow-btn.following:hover {
    background: var(--surface-hover);
  }

  .suggested-section-header {
    text-align: center;
    padding: 32px 0 20px;
    margin: 20px 0;
    border-top: 1px solid var(--border);
  }

  .suggested-section-title {
    font-size: 20px;
    font-weight: 800;
    background: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: 8px;
  }

  .suggested-section-subtitle {
    color: var(--text-secondary);
    font-size: 14px;
  }
  </style>
</head>
<body>
  <%- include('../partials/nav') %>
  
  <!-- <CHANGE> Added welcome banner section matching screenshot -->
  <div class="welcome-banner">
    <div class="welcome-container">
      <div class="welcome-content">
        <h1 class="welcome-title">Posts for you</h1>
        <p class="welcome-subtitle">Discover amazing content from creators you love</p>
      </div>
      <div class="welcome-icon">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
          <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
        </svg>
      </div>
    </div>
  </div>

  <main>
    <!-- <CHANGE> Updated main layout structure to match screenshot -->
    <div class="main-layout">
      <section aria-label="Feed" class="main-feed">
          <div id="feed" class="feed" aria-live="polite">
            <% if (!isFollowingAny) { %>
              <!-- Welcome message for new users -->
              <div class="empty-feed">
                <div class="empty-logo" style="width: 80px; height: 80px; background: var(--accent-gradient); border-radius: 16px; display: flex; align-items: center; justify-content: center; font-weight: 900; color: white; font-size: 48px; box-shadow: 0 8px 30px rgba(102, 126, 234, 0.4); margin-bottom: 16px; opacity: 0.8;">
                  L
                </div>
                <div class="welcome-text">
                  <h3>Welcome to Linksy!</h3>
                  <p>Start following people to see their posts in your feed.</p>
                  <p>Check out the suggested users on the right to get started.</p>
                </div>
              </div>
            <% } else if (!hasFollowedPosts) { %>
              <!-- No recent posts message -->
              <div class="empty-feed">
                <svg viewBox="0 0 24 24">
                  <path d="M12 3a9 9 0 100 18 9 9 0 000-18zm1 13h-2v-2h2v2zm0-4h-2V7h2v5z"/>
                </svg>
                <h2>No Recent Posts</h2>
                <p>The people you follow haven't posted anything yet.</p>
              </div>
            <% } else { %>
              <!-- Regular posts from followed users -->
              <% posts.forEach(post => { %>
                <article class="post-card" data-post-id="<%= post._id %>">
                  <div class="post-header">
                    <div class="post-user">
                      <div class="post-avatar-container" style="position: relative; width: 40px; height: 40px;">
                        <svg class="default-avatar-icon <%= post.user.avatar ? 'hidden' : '' %>" viewBox="0 0 24 24" fill="currentColor" style="width: 20px; height: 20px; color: #8a8a8a; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                            <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                        </svg>
                        <img src="<%= post.user.avatar || '' %>" 
                            alt="<%= post.user.username %>" 
                            class="post-avatar <%= !post.user.avatar ? 'hidden' : '' %>"
                            onerror="this.style.display='none'; this.parentNode.querySelector('.default-avatar-icon').style.display='block'; this.parentNode.querySelector('.default-avatar-icon').classList.remove('hidden');">
                    </div>
                      <div class="post-user-info">
                        <span class="post-username"><%= post.user.name %></span>
                        <span class="post-time"><%= post.timestamp %></span>
                      </div>
                    </div>
                    <button class="post-menu" aria-label="Post menu">
                    </button>
                  </div>

                  <% if (post.image) { %>
                    <img src="<%= post.image %>" alt="Post image from <%= post.user.username %>" class="post-image" data-post-id="<%= post._id %>" />
                  <% } %>
                  
                  <div class="post-actions">
                    <div class="post-action like-action">
                      <svg class="like-icon <%= post.liked ? 'liked' : '' %>"
                        viewBox="0 0 24 24" onclick="toggleLike('<%= post._id %>', event)">
                        <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                      </svg>
                      <span class="like-count" onclick="showLikesModal('<%= post._id %>')"><%= post.likes ? post.likes.length : 0 %></span>
                    </div>
                    
                    <div class="post-action comment-action" onclick="toggleComments('<%= post._id %>')">
                      <svg viewBox="0 0 24 24">
                        <path d="M21 6h-2v9H6v2c0 .55.45 1 1 1h11l4 4V7c0-.55-.45-1-1-1zm-4 6V3c0-.55-.45-1-1-1H3c-.55 0-1 .45-1 1v14l4-4h11c.55 0 1-.45 1-1z"/>
                      </svg>
                      <span class="comment-count"><%= post.comments ? post.comments.length : 0 %></span>
                    </div>
                  </div>

                  <div class="comments-section" id="comments-<%= post._id %>" style="display: none;">
                    <div class="comment-input-container">
                      <img src="<%= user.avatar %>" alt="Your avatar" class="comment-avatar">
                      <input type="text" class="comment-input" placeholder="Add a comment..." 
                            onkeypress="handleCommentKeypress(event, '<%= post._id %>')">
                      <button class="comment-submit" onclick="addComment('<%= post._id %>')">Post</button>
                    </div>
                    <div class="comments-list" id="comments-list-<%= post._id %>">
                      <!-- Comments will be loaded here -->
                    </div>
                  </div>
                </article>
              <% }) %>
              
              <!-- Show caught up message only when there are posts -->
              <div class="caught-up">
                <div class="caught-up-icon">âœ¨</div>
                <h3>You're all caught up!</h3>
                <p>You've seen all the recent posts from people you follow.</p>
              </div>
            <% } %>

            <!-- Suggested posts section - shown in ALL cases -->
            <% if (hasSuggestedPosts) { %>
              <div class="suggested-section-header">
                <h3 class="suggested-section-title">Suggested for you</h3>
                <p class="suggested-section-subtitle">Posts from people you might like</p>
              </div>
              
              <% suggestedPosts.forEach(post => { %>
                <article class="post-card" data-post-id="<%= post._id %>">
                  <div class="post-header">
                      <div class="post-user">
                        <img src="<%= post.user.avatar %>" alt="<%= post.user.username %>" class="post-avatar" />
                        <div class="post-user-info">
                          <span class="post-username"><%= post.user.name %></span>
                          <span class="post-time"><%= post.timestamp %></span>
                        </div>
                      </div>
                      <!-- Follow button moved to extreme right -->
                      <button class="post-follow-btn" onclick="toggleFollowFromPost(event, '<%= post.user._id %>')">Follow</button>
                    </div>
                  <% if (post.image) { %>
                    <img src="<%= post.image %>" alt="Post image from <%= post.user.username %>" class="post-image" data-post-id="<%= post._id %>" />
                  <% } %>
                  
                  <div class="post-actions">
                    <div class="post-action like-action">
                      <svg class="like-icon <%= post.liked ? 'liked' : '' %>"
                        viewBox="0 0 24 24" onclick="toggleLike('<%= post._id %>', event)">
                        <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                      </svg>
                      <span class="like-count" onclick="showLikesModal('<%= post._id %>')"><%= post.likes ? post.likes.length : 0 %></span>
                    </div>
                    
                    <div class="post-action comment-action" onclick="toggleComments('<%= post._id %>')">
                      <svg viewBox="0 0 24 24">
                        <path d="M21 6h-2v9H6v2c0 .55.45 1 1 1h11l4 4V7c0-.55-.45-1-1-1zm-4 6V3c0-.55-.45-1-1-1H3c-.55 0-1 .45-1 1v14l4-4h11c.55 0 1-.45 1-1z"/>
                      </svg>
                      <span class="comment-count"><%= post.comments ? post.comments.length : 0 %></span>
                    </div>
                  </div>

                  <div class="comments-section" id="comments-<%= post._id %>" style="display: none;">
                    <div class="comment-input-container">
                      <img src="<%= user.avatar %>" alt="Your avatar" class="comment-avatar">
                      <input type="text" class="comment-input" placeholder="Add a comment..." 
                            onkeypress="handleCommentKeypress(event, '<%= post._id %>')">
                      <button class="comment-submit" onclick="addComment('<%= post._id %>')">Post</button>
                    </div>
                    <div class="comments-list" id="comments-list-<%= post._id %>">
                      <!-- Comments will be loaded here -->
                    </div>
                  </div>
                </article>
              <% }) %>
            <% } %>
          </div>
        </section>
      <!-- <CHANGE> Added sidebar with suggested users matching screenshot -->
      <aside class="sidebar-container" aria-label="Suggested for you">
        <section class="suggestions">
          <div class="suggestions-header">
            <h3 class="suggestions-title">Suggested for you</h3>
          </div>
            <!-- Sample suggested users matching screenshot design -->
            <div class="suggestions-list">
                <% if (suggestions && suggestions.length > 0) { %>
                  <% suggestions.forEach(suggestion => { %>
                    <div class="suggestion-item">
                      <div class="sug-user">
                        <img src="<%= suggestion.avatar || 'https://picsum.photos/seed/' + suggestion.username + '/200/200' %>" 
                            alt="<%= suggestion.username %>" class="sug-avatar" />
                        <div class="sug-meta">
                          <span class="sug-name" style="cursor: pointer; color: var(--primary);" 
                                onclick="window.location.href='/user/<%= suggestion.username %>'">
                            <%= suggestion.name || suggestion.username %>
                          </span>
                          <span class="sug-note"><%= suggestion.note %></span>
                        </div>
                      </div>
                      <button class="follow-btn" onclick="toggleFollowSuggestion(event, '<%= suggestion._id %>')">Follow</button>
                    </div>
                  <% }) %>
                <% } else { %>
                  <div style="text-align: center; color: var(--text-muted); padding: 20px;">
                    No suggestions available
                  </div>
                <% } %>
              </div>
              <!-- Add this modal HTML before the closing </body> tag -->
                <div id="likesModal" class="modal" style="display: none;">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h3 id="likesModalTitle">Likes</h3>
                      <span class="close-modal" onclick="closeLikesModal()">&times;</span>
                    </div>
                    <div class="modal-body" id="likesModalBody">
                      <!-- Likes list will be populated here -->
                    </div>
                  </div>
                </div>
        </section>
      </aside>
    </div>
  </main>

  <script>
    // <CHANGE> Added toggle follow function for sidebar
    async function toggleFollowSuggestion(event, userId) {
      event.stopPropagation(); // Prevent event bubbling
      
      try {
        const response = await fetch(`/users/${userId}/follow`, {
          method: 'POST'
        });
        
        if (!response.ok) throw new Error('Failed to toggle follow status.');
        
        const data = await response.json();
        
        // Update button state
        const followBtn = event.target;
        if (data.following) {
          followBtn.textContent = 'Following';
          followBtn.classList.add('following');
        } else {
          followBtn.textContent = 'Follow';
          followBtn.classList.remove('following');
        }
      } catch (error) {
        console.error('Follow error:', error);
      }
}
    // Add this new function for following from posts
    async function toggleFollowFromPost(event, userId) {
      event.stopPropagation();
      
      const followBtn = event.target;
      
      try {
        const response = await fetch(`/users/${userId}/follow`, {
          method: 'POST'
        });
        
        if (!response.ok) throw new Error('Failed to toggle follow status.');
        
        const data = await response.json();
        
        // Update button state directly
        if (data.following) {
          followBtn.textContent = 'Following';
          followBtn.classList.add('following');
        } else {
          followBtn.textContent = 'Follow';
          followBtn.classList.remove('following');
        }
      } catch (error) {
        console.error('Follow error:', error);
        // Could add a brief error indication if needed
      }
    }
    async function toggleLike(postId, event) {
      if (event) {
          event.stopPropagation();
      }
      
      try {
          const response = await fetch(`/posts/${postId}/like`, {
              method: 'POST'
          });
          const data = await response.json();
          
          if (data.success) {
              const likeIcon = document.querySelector(`[data-post-id="${postId}"] .like-icon`);
              const likeCount = document.querySelector(`[data-post-id="${postId}"] .like-count`);
              
              if (data.liked) {
                  likeIcon.classList.add('liked');
              } else {
                  likeIcon.classList.remove('liked');
              }
              
              likeCount.textContent = data.likes;
          }
      } catch (error) {
          console.error('Error toggling like:', error);
      }
  }
    // Show likes modal
    async function showLikesModal(postId) {
      if (event) {
        event.stopPropagation();
      }
      const modal = document.getElementById('likesModal');
      const modalTitle = document.getElementById('likesModalTitle');
      const modalBody = document.getElementById('likesModalBody');
      
      modalTitle.textContent = 'Likes';
      modalBody.innerHTML = '<div class="modal-loading">Loading...</div>';
      modal.style.display = 'flex';
      
      try {
        const response = await fetch(`/posts/${postId}/likes`);
        const data = await response.json();
        
        if (data.success) {
          if (data.users.length === 0) {
            modalBody.innerHTML = '<div class="modal-empty">No likes yet</div>';
          } else {
            modalBody.innerHTML = data.users.map(user => `
              <div class="user-item" onclick="window.location.href='/user/${user.username}'">
                <img src="${user.avatar || 'https://picsum.photos/seed/' + user.username + '/200/200'}" 
                    alt="${user.name}" class="user-item-avatar">
                <div class="user-item-info">
                  <div class="user-item-name">${user.name}</div>
                  <div class="user-item-username">@${user.username}</div>
                </div>
              </div>
            `).join('');
          }
        } else {
          modalBody.innerHTML = '<div class="modal-empty">Failed to load likes</div>';
        }
      } catch (error) {
        console.error('Error loading likes:', error);
        modalBody.innerHTML = '<div class="modal-empty">Error loading likes</div>';
      }
    }

    function closeLikesModal() {
      document.getElementById('likesModal').style.display = 'none';
    }

    // Enhanced comment functionality with replies
    async function toggleComments(postId) {
      const commentsSection = document.getElementById(`comments-${postId}`);
      const commentsList = document.getElementById(`comments-list-${postId}`);
      
      if (commentsSection.style.display === 'none') {
        commentsSection.style.display = 'block';
        await loadComments(postId);
      } else {
        commentsSection.style.display = 'none';
      }
    }

    async function loadComments(postId) {
      const commentsList = document.getElementById(`comments-list-${postId}`);
      commentsList.innerHTML = '<div style="text-align: center; color: #666666; padding: 20px;">Loading comments...</div>';
      
      try {
        const response = await fetch(`/posts/${postId}/comments`);
        const data = await response.json();
        
        if (data.success) {
          if (data.comments.length === 0) {
            commentsList.innerHTML = '<div style="text-align: center; color: #666666; padding: 20px;">No comments yet</div>';
          } else {
           commentsList.innerHTML = data.comments.map(comment => `
              <div class="comment-item" data-comment-id="${comment._id}">
                  <div style="position: relative; width: 32px; height: 32px; border-radius: 50%; border: 2px solid #3a3a3a; background: #2a2a2a; display: flex; align-items: center; justify-content: center; overflow: hidden; flex-shrink: 0;">
                      <svg viewBox="0 0 24 24" fill="currentColor" style="width: 16px; height: 16px; color: #8a8a8a; display: ${comment.user.avatar ? 'none' : 'block'};">
                          <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                      </svg>
                      <img src="${comment.user.avatar || ''}" 
                          alt="${comment.user.name}" 
                          style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover; display: ${comment.user.avatar ? 'block' : 'none'};"
                          onerror="this.style.display='none'; this.parentNode.querySelector('svg').style.display='block';">
                  </div>
              <div class="reply-input-container" id="reply-input-${comment._id}">
                <img src="${getCurrentUserAvatar()}" alt="Your avatar" class="reply-input-avatar">
                <input type="text" class="reply-input" placeholder="Write a reply..." 
                    onkeypress="handleReplyKeypress(event, '${postId}', '${comment._id}')">
                <button class="reply-submit" onclick="addReply('${postId}', '${comment._id}')">Reply</button>
              </div>
              
              <div class="replies-container" id="replies-${comment._id}" style="display: none;">
                ${comment.replies ? comment.replies.map(reply => `
                  <div class="reply-item">
                    <img src="${reply.user.avatar || 'https://picsum.photos/seed/' + reply.user.username + '/200/200'}" 
                        alt="${reply.user.name}" class="reply-item-avatar">
                    <div class="reply-item-content">
                      <div class="reply-item-header">
                        <span class="reply-item-name" style="cursor: pointer; color: #1da1f2;" onclick="window.location.href='/user/${reply.user.username}'">${reply.user.name}</span>
                        <span class="reply-item-time">${formatTime(reply.createdAt)}</span>
                      </div>
                      <div class="reply-item-text">${reply.text}</div>
                    </div>
                  </div>
                `).join('') : ''}
              </div>
            `).join('');
          }
        }
      } catch (error) {
        console.error('Error loading comments:', error);
        commentsList.innerHTML = '<div style="text-align: center; color: #666666; padding: 20px;">Failed to load comments</div>';
      }
    }

    async function addComment(postId) {
      const input = document.querySelector(`#comments-${postId} .comment-input`);
      const submitBtn = document.querySelector(`#comments-${postId} .comment-submit`);
      const text = input.value.trim();
      
      if (!text) return;
      
      try {
        submitBtn.disabled = true;
        submitBtn.textContent = 'Posting...';
        
        const response = await fetch(`/posts/${postId}/comment`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ text })
        });
        
        const data = await response.json();
        
        if (data.success) {
          input.value = '';
          await loadComments(postId);
          
          // Update comment count
          const commentCount = document.querySelector(`[data-post-id="${postId}"] .comment-count`);
          commentCount.textContent = data.totalComments || (parseInt(commentCount.textContent) + 1);
        } else {
          alert(data.error || 'Failed to add comment');
        }
      } catch (error) {
        console.error('Error adding comment:', error);
        alert('Failed to add comment');
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = 'Post';
      }
    }

    function handleCommentKeypress(event, postId) {
      if (event.key === 'Enter') {
        event.preventDefault();
        addComment(postId);
      }
    }

    // Reply functionality
    function showReplyInput(postId, commentId) {
      document.querySelectorAll('.reply-input-container').forEach(container => {
        container.classList.remove('show');
      });
      
      const replyInput = document.getElementById(`reply-input-${commentId}`);
      replyInput.classList.add('show');
      replyInput.querySelector('.reply-input').focus();
    }

    function toggleReplies(commentId) {
      const repliesContainer = document.getElementById(`replies-${commentId}`);
      const toggleBtn = event.target;
      
      if (repliesContainer.style.display === 'none') {
        repliesContainer.style.display = 'block';
        toggleBtn.textContent = 'Hide replies';
      } else {
        repliesContainer.style.display = 'none';
        const repliesCount = repliesContainer.querySelectorAll('.reply-item').length;
        toggleBtn.textContent = `${repliesCount} replies`;
      }
    }

    async function addReply(postId, commentId) {
      const input = document.querySelector(`#reply-input-${commentId} .reply-input`);
      const submitBtn = document.querySelector(`#reply-input-${commentId} .reply-submit`);
      const text = input.value.trim();
      
      if (!text) return;
      
      try {
        submitBtn.disabled = true;
        submitBtn.textContent = 'Replying...';
        
        const response = await fetch(`/posts/${postId}/comments/${commentId}/reply`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ text })
        });
        
        const data = await response.json();
        
        if (data.success) {
          input.value = '';
          document.getElementById(`reply-input-${commentId}`).classList.remove('show');
          
          const repliesContainer = document.getElementById(`replies-${commentId}`);
          const newReplyHTML = `
            <div class="reply-item">
              <img src="${data.reply.user.avatar || 'https://picsum.photos/seed/' + data.reply.user.username + '/200/200'}" 
                  alt="${data.reply.user.name}" class="reply-item-avatar">
              <div class="reply-item-content">
                <div class="reply-item-header">
                  <span class="reply-item-name" style="cursor: pointer; color: #1da1f2;" onclick="window.location.href='/user/${data.reply.user.username}'">${data.reply.user.name}</span>
                  <span class="reply-item-time">${formatTime(data.reply.createdAt)}</span>
                </div>
                <div class="reply-item-text">${data.reply.text}</div>
              </div>
            </div>
          `;
          
          repliesContainer.innerHTML += newReplyHTML;
          repliesContainer.style.display = 'block';
          
          const showRepliesBtn = document.querySelector(`[data-comment-id="${commentId}"] .show-replies-btn`);
          if (showRepliesBtn) {
            showRepliesBtn.textContent = 'Hide replies';
          } else {
            const actionsDiv = document.querySelector(`[data-comment-id="${commentId}"] .comment-item-actions`);
            actionsDiv.innerHTML += `<button class="show-replies-btn" onclick="toggleReplies('${commentId}')">Hide replies</button>`;
          }
        } else {
          alert(data.error || 'Failed to add reply');
        }
      } catch (error) {
        console.error('Error adding reply:', error);
        alert('Failed to add reply');
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = 'Reply';
      }
    }

    function handleReplyKeypress(event, postId, commentId) {
      if (event.key === 'Enter') {
        event.preventDefault();
        addReply(postId, commentId);
      }
      if (event.key === 'Escape') {
        document.getElementById(`reply-input-${commentId}`).classList.remove('show');
      }
    }

    function getCurrentUserAvatar() {
      return document.querySelector('.comment-avatar')?.src || 'https://picsum.photos/seed/default/200/200';
    }

    function formatTime(dateString) {
      const date = new Date(dateString);
      const now = new Date();
      const diff = now - date;
      
      const minutes = Math.floor(diff / 60000);
      const hours = Math.floor(diff / 3600000);
      const days = Math.floor(diff / 86400000);
      
      if (minutes < 1) return 'now';
      if (minutes < 60) return `${minutes}m`;
      if (hours < 24) return `${hours}h`;
      return `${days}d`;
    }

    // Modal event listeners
    window.addEventListener('click', function(event) {
      const likesModal = document.getElementById('likesModal');
      if (event.target === likesModal) {
        closeLikesModal();
      }
    });

    document.addEventListener('keydown', function(event) {
      if (event.key === 'Escape') {
        closeLikesModal();
      }
    });
  </script>
</body>
</html>