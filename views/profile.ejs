<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Profile</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #0a0a0a;
            color: #ffffff;
            min-height: 100vh;
        }

        /* --- Main container for the two-column layout --- */
        .profile-layout {
            max-width: 1200px;
            margin: 80px auto 0 auto;;
            padding: 24px;
            display: grid;
            grid-template-columns: 1fr; /* Default to single column for mobile */
            gap: 32px;
        }
        
        .profile-header {
            display: flex;
            align-items: flex-start;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .profile-avatar-container {
            position: relative;
            cursor: pointer;
        }

        .profile-avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
            border: 2px solid #3a3a3a;
        }

        .avatar-overlay {
            position: absolute;
            top: 0; left: 0; width: 80px; height: 80px; border-radius: 50%;
            background: rgba(0, 0, 0, 0.6);
            display: flex; align-items: center; justify-content: center;
            opacity: 0;
            transition: opacity 0.2s;
            font-size: 12px;
            text-align: center;
        }

        .profile-avatar-container:hover .avatar-overlay {
            opacity: 1;
        }

        .hidden-file-input {
            display: none;
        }

        .profile-info {
            margin-bottom: 20px;
        }

        .editable-field {
            position: relative;
            margin-bottom: 16px;
        }

        .field-display {
            padding: 4px 0;
            display: flex;
            align-items: flex-start;
            justify-content: space-between;
            gap: 16px;
        }
        
        .inline-edit-btn {
            background: none;
            border: 1px solid #3a3a3a;
            color: #b3b3b3;
            padding: 4px 12px;
            border-radius: 16px;
            font-size: 13px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            flex-shrink: 0;
        }

        .inline-edit-btn:hover {
            background: #1a1a1a;
            color: #ffffff;
        }

        .field-input {
            display: none; background: #2a2a2a; border: 1px solid #3a3a3a;
            color: #ffffff; padding: 8px 12px; border-radius: 8px;
            font-size: inherit; width: 100%;
        }
        .field-input:focus { outline: none; border-color: #1da1f2; }
        .profile-name { font-size: 24px; font-weight: 700; line-height: 1.2;}
        .username { color: #8a8a8a; font-size: 15px; }
        .bio { font-size: 15px; line-height: 1.5; min-height: 20px; white-space: pre-wrap;}
        .location { color: #8a8a8a; font-size: 15px; display: flex; align-items: center; gap: 4px; }

        .stats {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        .stat { color: #8a8a8a; font-size: 15px; }
        .stat strong { color: #ffffff; font-weight: 700; }

        .editing .field-display { display: none; }
        .editing .field-input { display: block; }
        .field-actions { display: none; gap: 8px; margin-top: 8px; }
        .editing .field-actions { display: flex; }
        .field-button { padding: 4px 12px; border: 1px solid #3a3a3a; background: #2a2a2a; color: #ffffff; border-radius: 16px; font-size: 12px; cursor: pointer; }
        .save-button { background: #1da1f2; border-color: #1da1f2; }

        .tabs {
            border-bottom: 1px solid #2a2a2a;
            display: flex;
        }

        .tab {
            padding: 16px 0;
            margin-right: 24px;
            color: #ffffff;
            font-size: 15px;
            font-weight: 500;
            cursor: pointer;
            position: relative;
        }

        .tab.active::after {
            content: ''; position: absolute; bottom: -1px; left: 0;
            width: 100%; height: 2px; background: #1da1f2;
        }

        .posts-container {
            min-height: 400px;
            padding-top: 24px;
        }

        .post {
            border-bottom: 1px solid #2a2a2a;
            padding-bottom: 16px;
            margin-bottom: 16px;
        }
        .post:last-child {
            border-bottom: none;
            margin-bottom: 0;
        }

        .post-header {
            display: flex; align-items: flex-start; gap: 12px;
            margin-bottom: 12px;
        }
        .post-avatar { width: 40px; height: 40px; border-radius: 50%; object-fit: cover; }
        .post-info { flex: 1; }
        .post-user { display: flex; align-items: center; gap: 8px; margin-bottom: 4px; }
        .post-name { font-weight: 700; font-size: 15px; }
        .post-time { color: #8a8a8a; font-size: 15px; }
        .post-content { font-size: 15px; line-height: 1.4; margin-bottom: 12px; }
        .post-image { width: 100%; border-radius: 16px; margin-bottom: 12px; max-height: 500px; object-fit: cover; }
        .post-actions { display: flex; max-width: 400px; color: #8a8a8a; }
        .post-action { display: flex; align-items: center; gap: 8px; cursor: pointer; }
        .post-action svg { width: 18px; height: 18px; }
        .more-button { background: none; border: none; color: #8a8a8a; cursor: pointer; }
        
        /* --- Desktop and large screen styles --- */
        @media (min-width: 992px) {
            .profile-layout {
                grid-template-columns: 320px 1fr;
            }

            .profile-sidebar {
                position: sticky;
                top: 24px; 
                align-self: start;
            }
            
            .profile-main-content {
                border-left: 1px solid #2a2a2a;
                padding-left: 32px;
            }
        }
        .modal {
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: #1a1a1a;
            border: 1px solid #3a3a3a;
            border-radius: 16px;
            width: 90%;
            max-width: 400px;
            max-height: 600px;
            overflow: hidden;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            border-bottom: 1px solid #3a3a3a;
        }

        .modal-header h3 {
            margin: 0;
            font-size: 20px;
            font-weight: 700;
        }

        .close-modal {
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            color: #8a8a8a;
            transition: color 0.2s;
        }

        .close-modal:hover {
            color: #ffffff;
        }

        .modal-body {
            padding: 0;
            max-height: 500px;
            overflow-y: auto;
        }

        .user-item {
            display: flex;
            align-items: center;
            padding: 16px 20px;
            border-bottom: 1px solid #2a2a2a;
            transition: background-color 0.2s;
            cursor: pointer;
        }

        .user-item:hover {
            background-color: #2a2a2a;
        }

        .user-item:last-child {
            border-bottom: none;
        }

        .user-item-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 12px;
        }

        .user-item-info {
            flex: 1;
        }

        .user-item-name {
            font-weight: 700;
            font-size: 15px;
            margin-bottom: 2px;
        }

        .user-item-username {
            color: #8a8a8a;
            font-size: 14px;
        }

        .modal-loading {
            text-align: center;
            padding: 40px;
            color: #8a8a8a;
        }

        .modal-empty {
            text-align: center;
            padding: 40px;
            color: #8a8a8a;
        }
        .post-actions {
            display: flex;
            align-items: center; /* Ensures vertical alignment */
            gap: 12px; /* Or remove this for no gap */
            padding: 12px 0;
            border-bottom: 1px solid #2a2a2a;
            margin-bottom: 12px;
        }

        .post-action {
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
            color: #8a8a8a;
            transition: color 0.2s;
            padding: 8px;
            border-radius: 8px;
            transition: all 0.2s;
        }

        .post-action:hover {
            background: #1a1a1a;
            color: #ffffff;
        }

        .post-action svg {
            width: 18px;
            height: 18px;
            fill: currentColor;
        }

        .like-icon.liked {
            color: #ff4458;
            fill: #ff4458;
        }

        .like-action:hover .like-icon:not(.liked) {
            color: #ff4458;
        }

        .comment-action:hover svg {
            color: #1da1f2;
        }

        .comments-section {
            border-top: 1px solid #2a2a2a;
            padding-top: 12px;
        }

        .comment-input-container {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 16px;
            padding: 12px;
            background: #1a1a1a;
            border-radius: 12px;
        }

        .comment-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            object-fit: cover;
        }

        .comment-input {
            flex: 1;
            background: transparent;
            border: none;
            color: #ffffff;
            font-size: 14px;
            outline: none;
        }

        .comment-input::placeholder {
            color: #8a8a8a;
        }

        .comment-submit {
            background: #1da1f2;
            border: none;
            color: #ffffff;
            padding: 6px 16px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.2s;
        }

        .comment-submit:hover {
            background: #1991d1;
        }

        .comment-submit:disabled {
            background: #3a3a3a;
            cursor: not-allowed;
        }

        .comments-list {
            max-height: 300px;
            overflow-y: auto;
        }

        .comment-item {
            display: flex;
            gap: 12px;
            margin-bottom: 12px;
            padding: 8px;
            border-radius: 8px;
            transition: background 0.2s;
        }

        .comment-item:hover {
            background: #1a1a1a;
        }

        .comment-item-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            object-fit: cover;
        }

        .comment-item-content {
            flex: 1;
        }

        .comment-item-header {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 4px;
        }

        .comment-item-name {
            font-weight: 600;
            font-size: 14px;
        }

        .comment-item-time {
            color: #8a8a8a;
            font-size: 12px;
        }

        .comment-item-text {
            font-size: 14px;
            line-height: 1.4;
        }
        .like-action {
            position: relative;
        }

        .like-icon {
            cursor: pointer;
        }

        .like-count {
            cursor: pointer;
            user-select: none;
        }
        
        .comment-item {
            display: flex;
            gap: 12px;
            margin-bottom: 12px;
            padding: 8px;
            border-radius: 8px;
            transition: background 0.2s;
        }

        .comment-item:hover {
            background: #1a1a1a;
        }

        .comment-item-content {
            flex: 1;
        }

        .comment-item-header {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 4px;
        }

        .comment-item-actions {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-top: 8px;
        }

        .reply-btn {
            background: none;
            border: none;
            color: #8a8a8a;
            font-size: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: color 0.2s;
        }

        .reply-btn:hover {
            color: #1da1f2;
        }

        .replies-container {
            margin-top: 12px;
            margin-left: 44px; /* Indent replies */
            border-left: 2px solid #2a2a2a;
            padding-left: 12px;
        }

        .reply-item {
            display: flex;
            gap: 8px;
            margin-bottom: 8px;
            padding: 6px;
            border-radius: 6px;
            transition: background 0.2s;
        }

        .reply-item:hover {
            background: #1a1a1a;
        }

        .reply-item-avatar {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            object-fit: cover;
        }

        .reply-item-content {
            flex: 1;
        }

        .reply-item-header {
            display: flex;
            align-items: center;
            gap: 6px;
            margin-bottom: 2px;
        }

        .reply-item-name {
            font-weight: 600;
            font-size: 12px;
        }

        .reply-item-time {
            color: #8a8a8a;
            font-size: 11px;
        }

        .reply-item-text {
            font-size: 13px;
            line-height: 1.4;
        }

        .reply-input-container {
            display: none;
            margin-top: 8px;
            margin-left: 44px;
            padding: 8px;
            background: #1a1a1a;
            border-radius: 8px;
        }

        .reply-input-container.show {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .reply-input-avatar {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            object-fit: cover;
        }

        .reply-input {
            flex: 1;
            background: transparent;
            border: none;
            color: #ffffff;
            font-size: 12px;
            outline: none;
        }

        .reply-input::placeholder {
            color: #8a8a8a;
        }

        .reply-submit {
            background: #1da1f2;
            border: none;
            color: #ffffff;
            padding: 4px 12px;
            border-radius: 16px;
            font-size: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.2s;
        }

        .reply-submit:hover {
            background: #1991d1;
        }

        .reply-submit:disabled {
            background: #3a3a3a;
            cursor: not-allowed;
        }

        .show-replies-btn {
            background: none;
            border: none;
            color: #8a8a8a;
            font-size: 12px;
            cursor: pointer;
            margin-top: 4px;
            transition: color 0.2s;
        }

        .show-replies-btn:hover {
            color: #ffffff;
        }
    </style>
</head>
<body>
    <%- include('../partials/nav') %>
    <div class="profile-layout">      
        <div class="profile-sidebar">
            <div class="profile-header">
                <div class="profile-avatar-container" id="avatarContainer">
                    <img src="<%= user.avatar %>" alt="Profile" class="profile-avatar" id="profileAvatar">
                    <div class="avatar-overlay">
                        <span>Change Photo</span>
                    </div>
                    <input type="file" id="avatarInput" class="hidden-file-input" accept="image/*">
                </div>
            </div>

            <div class="profile-info">
                <div class="editable-field" id="nameField">
                    <div class="field-display">
                        <div>
                            <h2 class="profile-name" id="displayName"><%= user.name %></h2>
                        </div>
                        <button class="inline-edit-btn" onclick="editField('name')">Edit</button>
                    </div>
                    <input type="text" class="field-input" id="nameInput" value="<%= user.name %>">
                    <div class="field-actions">
                        <button class="field-button save-button" onclick="saveField('name')">Save</button>
                        <button class="field-button" onclick="cancelEdit('name')">Cancel</button>
                    </div>
                </div>
                
                <div class="editable-field" id="usernameField">
                    <div class="field-display">
                        <div class="username" id="displayUsername">@<%= user.username %></div>
                        <button class="inline-edit-btn" onclick="editField('username')">Edit</button>
                    </div>
                    <input type="text" class="field-input" id="usernameInput" value="<%= user.username %>" pattern="[a-zA-Z0-9_]+" title="Username can only contain letters, numbers, and underscores">
                    <div class="field-actions">
                        <button class="field-button save-button" onclick="saveField('username')">Save</button>
                        <button class="field-button" onclick="cancelEdit('username')">Cancel</button>
                    </div>
                </div>

                <div class="editable-field" id="bioField">
                    <div class="field-display">
                        <div class="bio" id="displayBio"><%= user.bio || 'No bio yet' %></div>
                        <button class="inline-edit-btn" onclick="editField('bio')">Edit</button>
                    </div>
                    <textarea class="field-input" id="bioInput" rows="3" style="resize: vertical; min-height: 60px;"><%= user.bio || '' %></textarea>
                    <div class="field-actions">
                        <button class="field-button save-button" onclick="saveField('bio')">Save</button>
                        <button class="field-button" onclick="cancelEdit('bio')">Cancel</button>
                    </div>
                </div>
                
                <div class="editable-field" id="locationField">
                    <div class="field-display">
                        <div class="location" id="displayLocation"><%= user.location ? '📍 ' + user.location : '📍 Add location' %></div>
                        <button class="inline-edit-btn" onclick="editField('location')">Edit</button>
                    </div>
                    <input type="text" class="field-input" id="locationInput" value="<%= user.location || '' %>" placeholder="Enter location">
                    <div class="field-actions">
                        <button class="field-button save-button" onclick="saveField('location')">Save</button>
                        <button class="field-button" onclick="cancelEdit('location')">Cancel</button>
                    </div>
                </div>
                
                <!-- Replace the existing stats div with this -->
                <div class="stats">
                    <div class="stat" style="cursor: pointer;" onclick="showFollowModal('following', '<%= user._id %>')">
                        <strong><%= user.following.length %></strong> Following
                    </div>
                    <div class="stat" style="cursor: pointer;" onclick="showFollowModal('followers', '<%= user._id %>')">
                        <strong><%= user.followers.length %></strong> Followers
                    </div>
                    <div class="stat"><strong><%= posts.length %></strong> Posts</div>
                </div>
            </div>
        </div>

        <div class="profile-main-content">
            <div class="tabs">
                <div class="tab active">Posts</div>
            </div>

        <div class="posts-container">
                <% if (posts.length === 0) { %>
                    <div style="text-align: center; color: #8a8a8a; padding: 40px 0;">
                        <p>No posts yet</p>
                    </div>
                <% } else { %>
                    <% posts.forEach(post => { %>
                        <div class="post" data-post-id="<%= post._id %>">
                            <div class="post-header">
                                <img src="<%= post.user.avatar %>" alt="<%= post.user.username %>" class="post-avatar">
                                <div class="post-info">
                                    <div class="post-user">
                                        <span class="post-name"><%= post.user.name %></span>
                                        <span class="post-time"> • <%= post.timestamp %></span>
                                    </div>
                                </div>
                            </div>
                            <% if (post.caption) { %>
                                <div class="post-content"><%= post.caption %></div>
                            <% } %>
                            <% if (post.image) { %>
                                <img src="<%= post.image %>" alt="Post image" class="post-image">
                            <% } %>
                            
                            <!-- New post actions section -->
                            <div class="post-actions">
                                <div class="post-action like-action">
                                    <svg class="like-icon <%= post.likes && post.likes.includes(user._id || currentUser._id) ? 'liked' : '' %>" 
                                        viewBox="0 0 24 24" onclick="toggleLike('<%= post._id %>')">
                                        <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                                    </svg>
                                    <span class="like-count" onclick="showLikesModal('<%= post._id %>')"><%= post.likes ? post.likes.length : 0 %></span>
                                </div>
                                
                                <div class="post-action comment-action" onclick="toggleComments('<%= post._id %>')">
                                    <svg viewBox="0 0 24 24">
                                        <path d="M21 6h-2v9H6v2c0 .55.45 1 1 1h11l4 4V7c0-.55-.45-1-1-1zm-4 6V3c0-.55-.45-1-1-1H3c-.55 0-1 .45-1 1v14l4-4h11c.55 0 1-.45 1-1z"/>
                                    </svg>
                                    <span class="comment-count"><%= post.comments ? post.comments.length : 0 %></span>
                                </div>
                            </div>
                            
                            <!-- Comments section (initially hidden) -->
                            <div class="comments-section" id="comments-<%= post._id %>" style="display: none;">
                                <div class="comment-input-container">
                                    <img src="<%= user.avatar %>" alt="Your avatar" class="comment-avatar">
                                    <input type="text" class="comment-input" placeholder="Add a comment..." 
                                        onkeypress="handleCommentKeypress(event, '<%= post._id %>')">
                                    <button class="comment-submit" onclick="addComment('<%= post._id %>')">Post</button>
                                </div>
                                <div class="comments-list" id="comments-list-<%= post._id %>">
                                    <!-- Comments will be loaded here -->
                                </div>
                            </div>
                        </div>
                    <% }) %>
                <% } %>
            </div>
        </div>
    </div>
    <div id="followModal" class="modal" style="display: none;">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="modalTitle">Followers</h3>
                <span class="close-modal" onclick="closeModal()">&times;</span>
            </div>
            <div class="modal-body" id="modalBody">
                <!-- User list will be populated here -->
            </div>
        </div>
    </div>
    <div id="likesModal" class="modal" style="display: none;">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="likesModalTitle">Likes</h3>
                <span class="close-modal" onclick="closeLikesModal()">&times;</span>
            </div>
            <div class="modal-body" id="likesModalBody">
                <!-- Likes list will be populated here -->
            </div>
        </div>
    </div>

    <script>
        document.getElementById('avatarContainer').addEventListener('click', () => {
            document.getElementById('avatarInput').click();
        });


        // Replace the avatar upload functionality in profile.ejs script section with this:
        document.getElementById('avatarInput').addEventListener('change', async (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = async (e) => {
                    const newImageUrl = e.target.result;
                    
                    try {
                        const response = await fetch('/profile/avatar', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                avatar: newImageUrl
                            })
                        });
                        
                        const data = await response.json();
                        
                        if (data.success) {
                            document.getElementById('profileAvatar').src = newImageUrl;
                            // Update all post avatars on the page
                            document.querySelectorAll('.post-avatar').forEach(el => {
                                el.src = newImageUrl;
                            });
                        } else {
                            alert('Failed to update avatar');
                        }
                    } catch (error) {
                        console.error('Avatar update error:', error);
                        alert('An error occurred. Please try again.');
                    }
                };
                reader.readAsDataURL(file);
            }
        });

        function editField(fieldType) {
            const field = document.getElementById(fieldType + 'Field');
            field.classList.add('editing');
            const input = document.getElementById(fieldType + 'Input');
            input.focus();
        }

        async function saveField(fieldType) {
            const field = document.getElementById(fieldType + 'Field');
            const input = document.getElementById(fieldType + 'Input');
            const display = document.getElementById('display' + fieldType.charAt(0).toUpperCase() + fieldType.slice(1));
            
            let newValue = input.value.trim();
            
            if (fieldType === 'location' && newValue && !newValue.startsWith('📍')) {
                newValue = '📍 ' + newValue;
            }
            
            if (fieldType === 'username' && newValue && !newValue.startsWith('@')) {
                newValue = '@' + newValue;
            }
            
            try {
                const response = await fetch('/profile/update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        name: fieldType === 'name' ? input.value.trim() : document.getElementById('nameInput').value.trim(),
                        username: fieldType === 'username' ? input.value.trim() : document.getElementById('usernameInput').value.trim(),
                        bio: fieldType === 'bio' ? input.value.trim() : document.getElementById('bioInput').value.trim(),
                        location: fieldType === 'location' ? input.value.trim() : document.getElementById('locationInput').value.trim()
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    if (fieldType === 'username') {
                        display.textContent = newValue;
                    } else if (newValue || fieldType !== 'location') {
                        display.textContent = fieldType === 'location' && newValue ? newValue : input.value.trim();
                    }
                    
                    if (fieldType === 'name') {
                        // Update all post names on the page
                        document.querySelectorAll('.post-name').forEach(el => {
                            el.textContent = input.value.trim();
                        });
                    }
                } else {
                    alert(data.error || 'Failed to update profile');
                }
            } catch (error) {
                console.error('Profile update error:', error);
                alert('An error occurred. Please try again.');
            }
            
            field.classList.remove('editing');
        }
        function cancelEdit(fieldType) {
            const field = document.getElementById(fieldType + 'Field');
            const input = document.getElementById(fieldType + 'Input');
            const display = document.getElementById('display' + fieldType.charAt(0).toUpperCase() + fieldType.slice(1));
            
            if (fieldType === 'location') {
                input.value = display.textContent.replace('📍 ', '');
            } else if (fieldType === 'username') {
                input.value = display.textContent.replace('@', '');
            } else {
                input.value = display.textContent;
            }
            
            field.classList.remove('editing');
        }

        document.addEventListener('keydown', (e) => {
            const activeField = document.querySelector('.editable-field.editing');
            if (activeField) {
                const fieldType = activeField.id.replace('Field', '');
                if (e.key === 'Enter' && e.target.tagName !== 'TEXTAREA') {
                    e.preventDefault();
                    saveField(fieldType);
                } else if (e.key === 'Escape') {
                    cancelEdit(fieldType);
                }
            }
        });
        async function showLikesModal(postId) {
            if (event) {
                event.stopPropagation();
            }
            const modal = document.getElementById('likesModal');
            const modalTitle = document.getElementById('likesModalTitle');
            const modalBody = document.getElementById('likesModalBody');
            
            modalTitle.textContent = 'Likes';
            modalBody.innerHTML = '<div class="modal-loading">Loading...</div>';
            modal.style.display = 'flex';
            
            try {
                const response = await fetch(`/posts/${postId}/likes`);
                const data = await response.json();
                
                if (data.success) {
                    if (data.users.length === 0) {
                        modalBody.innerHTML = '<div class="modal-empty">No likes yet</div>';
                    } else {
                        modalBody.innerHTML = data.users.map(user => `
                            <div class="user-item" onclick="window.location.href='/users/${user.username}'">
                                <img src="${user.avatar || 'https://picsum.photos/seed/' + user.username + '/200/200'}" 
                                    alt="${user.name}" class="user-item-avatar">
                                <div class="user-item-info">
                                    <div class="user-item-name">${user.name}</div>
                                    <div class="user-item-username">@${user.username}</div>
                                </div>
                            </div>
                        `).join('');
                    }
                } else {
                    modalBody.innerHTML = '<div class="modal-empty">Failed to load likes</div>';
                }
            } catch (error) {
                console.error('Error loading likes:', error);
                modalBody.innerHTML = '<div class="modal-empty">Error loading likes</div>';
            }
        }

        function closeLikesModal() {
            document.getElementById('likesModal').style.display = 'none';
        }
        async function showFollowModal(type, userId) {
        const modal = document.getElementById('followModal');
        const modalTitle = document.getElementById('modalTitle');
        const modalBody = document.getElementById('modalBody');
        
        modalTitle.textContent = type === 'followers' ? 'Followers' : 'Following';
        modalBody.innerHTML = '<div class="modal-loading">Loading...</div>';
        modal.style.display = 'flex';
        
        try {
            const response = await fetch(`/users/${userId}/${type}`);
            const data = await response.json();
            
            if (data.success) {
                if (data.users.length === 0) {
                    modalBody.innerHTML = `<div class="modal-empty">No ${type} yet</div>`;
                } else {
                    modalBody.innerHTML = data.users.map(user => `
                        <div class="user-item" onclick="window.location.href='/users/${user.username}'">
                            <img src="${user.avatar || 'https://picsum.photos/seed/' + user.username + '/200/200'}" 
                                alt="${user.name}" class="user-item-avatar">
                            <div class="user-item-info">
                                <div class="user-item-name">${user.name}</div>
                                <div class="user-item-username">@${user.username}</div>
                            </div>
                        </div>
                    `).join('');
                }
            } else {
                modalBody.innerHTML = '<div class="modal-empty">Failed to load users</div>';
            }
        } catch (error) {
            console.error('Error loading users:', error);
            modalBody.innerHTML = '<div class="modal-empty">Error loading users</div>';
        }
    }

    function closeModal() {
        document.getElementById('followModal').style.display = 'none';
    }

    // Close modal when clicking outside of it
    window.addEventListener('click', function(event) {
        const followModal = document.getElementById('followModal');
        const likesModal = document.getElementById('likesModal');
        
        if (event.target === followModal) {
            closeModal();
        }
        if (event.target === likesModal) {
            closeLikesModal();
        }
    });

    // Close modal with Escape key
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            closeModal();
            closeLikesModal()
        }
    });
    
    async function toggleLike(postId, event) {
        if (event) {
            event.stopPropagation();
        }
        
        try {
            const response = await fetch(`/posts/${postId}/like`, {
                method: 'POST'
            });
            const data = await response.json();
            
            if (data.success) {
                const likeIcon = document.querySelector(`[data-post-id="${postId}"] .like-icon`);
                const likeCount = document.querySelector(`[data-post-id="${postId}"] .like-count`);
                
                if (data.liked) {
                    likeIcon.classList.add('liked');
                } else {
                    likeIcon.classList.remove('liked');
                }
                
                likeCount.textContent = data.likes;
            }
        } catch (error) {
            console.error('Error toggling like:', error);
        }
    }

    // Comment functionality
    async function toggleComments(postId) {
        const commentsSection = document.getElementById(`comments-${postId}`);
        const commentsList = document.getElementById(`comments-list-${postId}`);
        
        if (commentsSection.style.display === 'none') {
            commentsSection.style.display = 'block';
            await loadComments(postId);
        } else {
            commentsSection.style.display = 'none';
        }
    }

    // Replace/update your loadComments function with this enhanced version
    async function loadComments(postId) {
        const commentsList = document.getElementById(`comments-list-${postId}`);
        commentsList.innerHTML = '<div style="text-align: center; color: #8a8a8a; padding: 20px;">Loading comments...</div>';
        
        try {
            const response = await fetch(`/posts/${postId}/comments`);
            const data = await response.json();
            
            if (data.success) {
                if (data.comments.length === 0) {
                    commentsList.innerHTML = '<div style="text-align: center; color: #8a8a8a; padding: 20px;">No comments yet</div>';
                } else {
                    commentsList.innerHTML = data.comments.map(comment => `
                        <div class="comment-item" data-comment-id="${comment._id}">
                            <img src="${comment.user.avatar || 'https://picsum.photos/seed/' + comment.user.username + '/200/200'}" 
                                alt="${comment.user.name}" class="comment-item-avatar">
                            <div class="comment-item-content">
                                <div class="comment-item-header">
                                    <span class="comment-item-name">${comment.user.name}</span>
                                    <span class="comment-item-time">${formatTime(comment.createdAt)}</span>
                                </div>
                                <div class="comment-item-text">${comment.text}</div>
                                <div class="comment-item-actions">
                                    <button class="reply-btn" onclick="showReplyInput('${postId}', '${comment._id}')">Reply</button>
                                    ${comment.replies.length > 0 ? `<button class="show-replies-btn" onclick="toggleReplies('${comment._id}')">${comment.replies.length} replies</button>` : ''}
                                </div>
                            </div>
                        </div>
                        
                        <div class="reply-input-container" id="reply-input-${comment._id}">
                            <img src="${getCurrentUserAvatar()}" alt="Your avatar" class="reply-input-avatar">
                            <input type="text" class="reply-input" placeholder="Write a reply..." 
                                onkeypress="handleReplyKeypress(event, '${postId}', '${comment._id}')">
                            <button class="reply-submit" onclick="addReply('${postId}', '${comment._id}')">Reply</button>
                        </div>
                        
                        <div class="replies-container" id="replies-${comment._id}" style="display: none;">
                            ${comment.replies.map(reply => `
                                <div class="reply-item">
                                    <img src="${reply.user.avatar || 'https://picsum.photos/seed/' + reply.user.username + '/200/200'}" 
                                        alt="${reply.user.name}" class="reply-item-avatar">
                                    <div class="reply-item-content">
                                        <div class="reply-item-header">
                                            <span class="reply-item-name">${reply.user.name}</span>
                                            <span class="reply-item-time">${formatTime(reply.createdAt)}</span>
                                        </div>
                                        <div class="reply-item-text">${reply.text}</div>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    `).join('');
                }
            }
        } catch (error) {
            console.error('Error loading comments:', error);
            commentsList.innerHTML = '<div style="text-align: center; color: #8a8a8a; padding: 20px;">Failed to load comments</div>';
        }
    }

    // Function to show reply input
    function showReplyInput(postId, commentId) {
        // Hide all other reply inputs
        document.querySelectorAll('.reply-input-container').forEach(container => {
            container.classList.remove('show');
        });
        
        const replyInput = document.getElementById(`reply-input-${commentId}`);
        replyInput.classList.add('show');
        replyInput.querySelector('.reply-input').focus();
    }

    // Function to toggle replies visibility
    function toggleReplies(commentId) {
        const repliesContainer = document.getElementById(`replies-${commentId}`);
        const toggleBtn = event.target;
        
        if (repliesContainer.style.display === 'none') {
            repliesContainer.style.display = 'block';
            toggleBtn.textContent = 'Hide replies';
        } else {
            repliesContainer.style.display = 'none';
            const repliesCount = repliesContainer.querySelectorAll('.reply-item').length;
            toggleBtn.textContent = `${repliesCount} replies`;
        }
    }

    // Function to add a reply
    async function addReply(postId, commentId) {
        const input = document.querySelector(`#reply-input-${commentId} .reply-input`);
        const submitBtn = document.querySelector(`#reply-input-${commentId} .reply-submit`);
        const text = input.value.trim();
        
        if (!text) return;
        
        try {
            submitBtn.disabled = true;
            submitBtn.textContent = 'Replying...';
            
            const response = await fetch(`/posts/${postId}/comments/${commentId}/reply`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ text })
            });
            
            const data = await response.json();
            
            if (data.success) {
                input.value = '';
                
                // Hide reply input
                document.getElementById(`reply-input-${commentId}`).classList.remove('show');
                
                // Add new reply to the replies container
                const repliesContainer = document.getElementById(`replies-${commentId}`);
                const newReplyHTML = `
                    <div class="reply-item">
                        <img src="${data.reply.user.avatar || 'https://picsum.photos/seed/' + data.reply.user.username + '/200/200'}" 
                            alt="${data.reply.user.name}" class="reply-item-avatar">
                        <div class="reply-item-content">
                            <div class="reply-item-header">
                                <span class="reply-item-name">${data.reply.user.name}</span>
                                <span class="reply-item-time">${formatTime(data.reply.createdAt)}</span>
                            </div>
                            <div class="reply-item-text">${data.reply.text}</div>
                        </div>
                    </div>
                `;
                
                repliesContainer.innerHTML += newReplyHTML;
                repliesContainer.style.display = 'block';
                
                // Update the main post's comment count
                const postElement = document.querySelector(`[data-post-id="${postId}"]`);
                const showRepliesBtn = document.querySelector(`[data-comment-id="${commentId}"] .show-replies-btn`);
                if (showRepliesBtn) {
                    showRepliesBtn.textContent = 'Hide replies';
                } else {
                    // Create new replies button if it doesn't exist
                    const actionsDiv = document.querySelector(`[data-comment-id="${commentId}"] .comment-item-actions`);
                    actionsDiv.innerHTML += `<button class="show-replies-btn" onclick="toggleReplies('${commentId}')">Hide replies</button>`;
                }
                
            } else {
                alert(data.error || 'Failed to add reply');
            }
        } catch (error) {
            console.error('Error adding reply:', error);
            alert('Failed to add reply');
        } finally {
            submitBtn.disabled = false;
            submitBtn.textContent = 'Reply';
        }
    }

    // Function to handle reply keypress
    function handleReplyKeypress(event, postId, commentId) {
        if (event.key === 'Enter') {
            event.preventDefault();
            addReply(postId, commentId);
        }
        if (event.key === 'Escape') {
            document.getElementById(`reply-input-${commentId}`).classList.remove('show');
        }
    }

    // Helper function to get current user avatar (you'll need to make this available)
    function getCurrentUserAvatar() {
        return document.querySelector('.comment-avatar')?.src || 'https://picsum.photos/seed/default/200/200';
    }

    async function addComment(postId) {
        const input = document.querySelector(`#comments-${postId} .comment-input`);
        const submitBtn = document.querySelector(`#comments-${postId} .comment-submit`);
        const text = input.value.trim();
        
        if (!text) return;
        
        try {
            submitBtn.disabled = true;
            submitBtn.textContent = 'Posting...';
            
            const response = await fetch(`/posts/${postId}/comment`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ text })
            });
            
            const data = await response.json();
            
            if (data.success) {
                input.value = '';
                await loadComments(postId);
                
                // Update comment count
                const commentCount = document.querySelector(`[data-post-id="${postId}"] .comment-count`);
                commentCount.textContent = data.totalComments;
            } else {
                alert(data.error || 'Failed to add comment');
            }
        } catch (error) {
            console.error('Error adding comment:', error);
            alert('Failed to add comment');
        } finally {
            submitBtn.disabled = false;
            submitBtn.textContent = 'Post';
        }
    }

    function handleCommentKeypress(event, postId) {
        if (event.key === 'Enter') {
            event.preventDefault();
            addComment(postId);
        }
    }

    function formatTime(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diff = now - date;
        
        const minutes = Math.floor(diff / 60000);
        const hours = Math.floor(diff / 3600000);
        const days = Math.floor(diff / 86400000);
        
        if (minutes < 1) return 'now';
        if (minutes < 60) return `${minutes}m`;
        if (hours < 24) return `${hours}h`;
        return `${days}d`;
    }
    </script>
</body>
</html>